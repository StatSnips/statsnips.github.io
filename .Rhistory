q()
library(installr)
updateR()
library(blockrand)
?blockrand
blockrand(10, num.levels = 2, levels = LETTERS[seq(length = num.levels)])
blockrand(10, levels = LETTERS[seq(length =2)])
blockrand(10, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
library(blockrand)
q <- blockrand(340, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
summary(q)
View(q)
q1 <- cbind(q[1,],q[4,])
View(q1)
q1 <- cbind(q[,1],q[,]4)
library(blockrand)
q <- blockrand(340, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
summary(q)
q1 <- cbind(q[,1],q[,]4)
q1 <- cbind(q[,1],q[,4])
View(q1)
library(blockrand)
q <- blockrand(340, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
summary(q)
q1 <- data.frame(q[,1],q[,4])
View(q1)
q1 <- data.frame(ID = q[,1], TREATMENT = q[,4])
View(q1)
library(blockrand)
q <- blockrand(340, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
summary(q)
q1 <- data.frame(ID = q[,1], TREATMENT = q[,4])
q1
?set.seed()
set.seed(RNGkind("Hello"))
set.seed(42)
idmaker(2)
idmaker <- function(x)
{
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1ðŸ˜¡])      # randominsing the numbers, and ensuing they all have the same number of characters
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
?toupper
idmaker <- function(x)
{
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1ðŸ˜¡])      # randominsing the numbers, and ensuing they all have the same number of characters
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1ðŸ˜¡])      # randominsing the numbers, and ensuing they all have the same number of characters
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
x =2
max.val = x*100
count <- nchar(as.character(max.val))
size <- paste("%0",count,"d",sep="")
lets <- toupper(sample(letters,x, replace=T))
nums <- sprintf(size,sample(1:max.val)[1ðŸ˜¡]
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1:range])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1:max])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
lets <- toupper(sample(letters,x, replace=T))  # randomising the letters
nums <- sprintf(size,sample(1:max.val)[1:max.val])
ids <- paste(lets,nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*100
count <- nchar(as.character(max.val))     # find out how many 'numbers' each ID will have after the letter
size <- paste("%0",count,"d",sep="")     # set the variable to be fed into 'sprintf' to ensure we have leading 0's
nums <- sprintf(size,sample(1:max.val)[1:max.val])
ids <- paste(nums,sep="")        # joining them together
return(ids)
}
idmaker(2)
idmaker <- function(x) {
max.val = x*1000
count <- nchar(as.character(max.val)
size <- paste("%0",count,"d",sep="")
nums <- sprintf(size,sample(1:max.val)[1:max.val])
ids <- paste(nums,sep="")
return(ids)
}
idmaker(4)
q2 <- idmaker(4)
setwd("C:/cygwin64/home/athom102/ERGOT/000_workspace/023_lkd_incentives")
library(blockrand)
set.seed(513)
q <- blockrand(340, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
summary(q)
q1 <- data.frame(TREATMENT = q[,4])
saveRDS(q1,"R_objects/final_q1.rds")
q1
setwd("C:/cygwin64/home/athom102/ERGOT/000_workspace/023_lkd_incentives")
library(blockrand)
set.seed(513)
q <- blockrand(340, levels = LETTERS[seq(length =2)], block.sizes = 1:4)
summary(q)
q1 <- data.frame(TREATMENT = q[,4])
saveRDS(q1,"R_objects/final_q1.rds")
q1
idmaker <- function(x) {
max.val = x*1000
count <- nchar(as.character(max.val)
size <- paste("%0",count,"d",sep="")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
q2
summarize(q2)
summary(q2)
max.val = x*1000
count <- nchar(as.character(max.val))
size <- paste("%0",count,"d",sep="")
nums <- sprintf(size,sample(1:max.val)[1:max.val])
ids <- paste(nums,sep="")
install.packages("xlsx")
library(xlsx)
write.xlsx(q2, "Ids.xls", sheetName="Sheet1")
install.packages("rJava")
library(xlsx)
library(rJava)
library("rJava")
q2
write.csv(q2, "test.csv")
rnorm()
rnorm(10)
?cats
?cars
plot(cars)
dat <- cars
library(ggplot2)
ggplot(aes(x=speed, y=dist)) + geom_point()
ggplot(aes(x=speed, y=dist), data=dat) + geom_point()
q()
q()
library("blockrand")
?blockrand
blockrand(n = 20, levels = c("A", "B"), stratum = c("Hi", "Low"), block.sizes = 1:4)
blockrand(n = 50, levels = c("A", "B"), stratum = c("Hi", "Low"), block.sizes = 1:4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("assertthat", "cluster", "curl", "DBI", "jsonlite", "lattice", "maptools", "psych", "Rcpp", "RcppEigen", "readr", "rmarkdown", "stringi", "survival", "tibble", "viridis", "zoo"))
install.packages('rsconnect')
rsconnect::setAccountInfo(name='alvinthomas', token='B84D8CAEB6B720F44BC53F40A6D3DF72', secret='y8+TMcrLUFN9C9p0Oi/wLLljI6+PNHRH5zce+lCF')
library(rsconnect)
install.packages(c("boot", "curl", "formatR", "Hmisc", "htmltools", "installr", "lme4", "markdown", "MASS", "MatchIt", "Matrix", "psych", "R6", "RcppEigen", "readxl", "rmarkdown", "rpart", "rsconnect", "tidyr"))
library(tidyverse)
installed.packages("devtools")
install.packages(c("purrr", "tidyr"))
install.packages("devtools")
devtools::install_github('rstudio/blogdown')
install.packages("tidyr")
q()
setwd("~/GitHub/alvinthomas.github.io")
